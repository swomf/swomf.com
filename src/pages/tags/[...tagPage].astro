---
import { type CollectionEntry, getCollection } from "astro:content";
import { POSTS_PER_PAGE } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";
import BaseLayout from "../../layouts/BaseLayout.astro";

type Props = {
  posts: CollectionEntry<"blog">[];
  precedingSlug: string;
  succeedingSlug: string;
};

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const uniqueTags = new Set(posts.flatMap(post => post.data.tags));

  const staticPages: { params: { tagPage: string }; props: Props }[] = [];

  uniqueTags.forEach(tag => {
    const postsByTag = posts.filter(post => post.data.tags.includes(tag));

    let slicesOfPosts: CollectionEntry<"blog">[][] = [];
    for (let i = 0; i < postsByTag.length; i += POSTS_PER_PAGE) {
      slicesOfPosts.push(postsByTag.slice(i, i + POSTS_PER_PAGE));
    }

    for (let pageNum = 1; pageNum <= slicesOfPosts.length; pageNum++) {
      let precedingSlug = `${tag}/${pageNum - 1}`,
        slug = `${tag}/${pageNum}`,
        succeedingSlug = `${tag}/${pageNum + 1}`;

      // the "1st" page has no number in URL
      if (pageNum === 1) {
        slug = `${tag}`;
        precedingSlug = ""; // no previous
      } else if (pageNum === 2) {
        precedingSlug = `${tag}`;
      }
      if (pageNum === slicesOfPosts.length) {
        succeedingSlug = ""; // no next
      }

      staticPages.push({
        params: { tagPage: slug },
        props: {
          posts: slicesOfPosts[pageNum - 1],
          precedingSlug,
          succeedingSlug,
        },
      });
    }
  });
  return staticPages;
}

// const { slug } = Astro.params;
const { posts, precedingSlug, succeedingSlug } = Astro.props;
---

<BaseLayout>
  {
    posts.map(post => (
      <>
        <a
          class="text-[var(--blue)] hover:text-[var(--accent)]"
          href={`/blog/${post.slug}/`}
        >
          {post.data.title}
        </a>
        <p class="ml-10">{post.data.description}</p>
        {post.data.updatedDate ? (
          <p class="ml-10">
            <FormattedDate date={post.data.pubDate} /> (upd.{" "}
            <FormattedDate date={post.data.updatedDate} />)
          </p>
        ) : (
          <p class="ml-10">
            <FormattedDate date={post.data.pubDate} />
          </p>
        )}
      </>
    ))
  }
  <nav>
    {
      (precedingSlug && (
        <a
          class="text-[var(--blue)] hover:text-[var(--accent)]"
          href={`/tags/${precedingSlug}`}
        >
          prev
        </a>
      )) || <>prev</>
    }
    {
      (succeedingSlug && (
        <a
          class="text-[var(--blue)] hover:text-[var(--accent)]"
          href={`/tags/${succeedingSlug}`}
        >
          next
        </a>
      )) || <>next</>
    }
  </nav>
</BaseLayout>
